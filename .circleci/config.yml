version: 2.1
orbs:
  docker: circleci/docker@2.7.0
  codecov: codecov/codecov@4.1.0
  python: circleci/python@2.1.1

jobs:
  build:
    executor:
      name: python/default
      tag: '3.12'

    # docker:
    #   - auth:
    #       username: $DOCKER_USERNAME
    #       password: $DOCKER_PASSWORD

    steps:
      - checkout
      - run:
          command: |
            echo 'build' > requirements.txt
            echo 'wheel' >> requirements.txt
            echo 'twine' >> requirements.txt
      - python/install-packages:
          pkg-manager: pip
          cache-version: build-v1
      - run:
          command: |
            python -m build
            python -m twine check dist/*
          name: Test packaging
      - persist_to_workspace:
          root: ~/project
          paths:
            - .

  deploy_pypi:
    executor:
      name: python/default
      tag: '3.12'

    # docker:
    #   - auth:
    #       username: $DOCKER_USERNAME
    #       password: $DOCKER_PASSWORD

    steps:
      - attach_workspace:
          at: ~/project

      - python/install-packages:
          args: twine
          pkg-manager: pip

      - run:
          command: python -m twine upload dist/*
          name: Upload to Pypi

  tests:
    executor:
      name: python/default
      tag: '3.12'

    # docker:
    #   - auth:
    #       username: $DOCKER_USERNAME
    #       password: $DOCKER_PASSWORD

    environment:
      - OSF_MIRROR_PATH: /tmp/data/templateflow
    steps:
      - restore_cache:
          keys:
            - annex-v1-{{ epoch }}
            - annex-v1-
      - run:
          name: Install git and git-annex
          command: |
            if [[ ! -e "/tmp/cache/git-annex-standalone.tar.gz" ]]; then
              wget -O- http://neuro.debian.net/lists/focal.us-ca.full | sudo tee /etc/apt/sources.list.d/neurodebian.sources.list
              sudo apt-key add .neurodebian/neurodebian.gpg
              sudo apt-key adv --recv-keys --keyserver hkps://keys.openpgp.org 0xA5D32F012649A5A9 || true
              sudo apt update && sudo apt-get install -y --no-install-recommends git-annex-standalone
              mkdir -p /tmp/cache
              tar czvf /tmp/cache/git-annex-standalone.tar.gz /usr/bin/git-annex /usr/bin/git-annex-shell /usr/lib/git-annex.linux
            else
              sudo tar xzfv /tmp/cache/git-annex-standalone.tar.gz -C /
            fi
            git config --global user.name "First Last"
            git config --global user.email "email@domain.com"

      - save_cache:
          key: annex-v1-{{ epoch }}
          paths:
            - "/tmp/cache"

      - attach_workspace:
          at: ~/project

      - run:
          command: |
            python .maint/update_requirements.py
          name: Generate requirements.txt

      - python/install-packages:
          pip-dependency-file: dev-requirements.txt
          pkg-manager: pip
          cache-version: v1

      - run:
          name: Run tests (config and others)
          command: |
            python -m pytest \
                   --junit-xml=~/tests/conftests.xml --cov templateflow --cov-report xml:~/coverage/cov_config.xml \
                   templateflow/tests/

      - codecov/upload:
          file: ~/coverage/cov_config.xml
          flags: config
          upload_name: General

      - run:
          name: Run tests (w/ DataLad)
          command: |
            mkdir -p ~/tests/ ~/coverage/
            export TEMPLATEFLOW_USE_DATALAD=on
            python -m pytest \
                   --junit-xml=~/tests/datalad.xml --cov templateflow --doctest-modules \
                   templateflow/api.py

            coverage run --append -m templateflow.cli config
            coverage run --append -m templateflow.cli ls MNI152NLin2009cAsym --suffix T1w
            coverage run --append -m templateflow.cli get MNI152NLin2009cAsym --suffix mask
            coverage run --append -m templateflow.cli update
            coverage xml -o ~/coverage/cov_api_dl.xml

      - codecov/upload:
          file: ~/coverage/cov_api_dl.xml
          flags: api,datalad
          upload_name: Datalad tests

      - run:
          name: Run tests (pulling from S3)
          command: |
            export TEMPLATEFLOW_USE_DATALAD=off
            export TEMPLATEFLOW_HOME=$HOME/templateflow-s3
            python -m pytest \
                   --junit-xml=~/tests/s3.xml --cov templateflow --doctest-modules templateflow/api.py

            coverage run --append -m templateflow.cli config
            coverage run --append -m templateflow.cli ls MNI152NLin2009cAsym --suffix T1w
            coverage run --append -m templateflow.cli get MNI152NLin2009cAsym --suffix mask
            coverage run --append -m templateflow.cli update
            coverage xml -o ~/coverage/cov_api_s3.xml

      - codecov/upload:
          file: ~/coverage/cov_api_s3.xml
          flags: api,s3
          upload_name: S3 tests

      - run:
          name: Run tests (w/ DataLad, bypassed via S3)
          command: |
            export TEMPLATEFLOW_USE_DATALAD=off
            export TEMPLATEFLOW_HOME=$HOME/templateflow-clean
            datalad install -r -s https://github.com/templateflow/templateflow $TEMPLATEFLOW_HOME
            python -m pytest \
                   --junit-xml=~/tests/dl+s3.xml --cov templateflow --cov-report xml:~/coverage/cov_api_dl_s3.xml \
                   --doctest-modules templateflow/api.py

      - codecov/upload:
          file: ~/coverage/cov_api_dl_s3.xml
          flags: api,dls3
          upload_name: Datalad-S3-bypass

      - store_test_results:
          path: ~/tests

  build_docs:
    machine:
      # https://discuss.circleci.com/t/linux-machine-executor-images-2021-april-q2-update/39928
      # upgrade Docker version
      image: default
    environment:
      - FSLOUTPUTTYPE: NIFTI
      - SUBJECTS_DIR: /tmp/subjects
    steps:
      - checkout
      - restore_cache:
          keys:
            - env-v7-{{ .Branch }}
            - env-v7-master
            - env-v7-
      - run:
          name: Install base packages
          command: |
            export PATH="$HOME/.conda/bin:$PATH"
            if ! [ -x "$(command -v curl)" ]; then
              sudo apt-get update
              sudo apt-get install -y --no-install-recommends curl
            fi

            if ! [ -x "$(command -v conda)" ]; then
              curl -sSLO https://repo.anaconda.com/miniconda/Miniconda3-py39_4.11.0-Linux-x86_64.sh
              bash Miniconda3-py39_4.11.0-Linux-x86_64.sh -b -p $HOME/.conda
            fi
            $HOME/.conda/bin/conda env update -f docs/environment.yml --prune

      - save_cache:
          key: env-v7-{{ .Branch }}
          paths:
            - ~/.conda

      - run:
          name: Check out git submodules
          command: git submodule update --init
      - run:
          name: Create subjects folder
          command: mkdir -p $SUBJECTS_DIR
      - run:
          name: Build only this commit
          command: |
            export PATH="$HOME/.conda/bin:$PATH"
            python -m pip install -U build hatch hatchling
            python -m hatch version
            make -C docs SPHINXOPTS="-W" BUILDDIR="$HOME/html" CURBRANCH="${CIRCLE_TAG}" html
      - store_artifacts:
          path: ~/html

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build:
          context:
            - nipreps-common
          filters:
            branches:
              ignore:
                - /docs?\/.*/
            tags:
              only: /.*/

      - tests:
          context:
            - nipreps-common
          requires:
            - build
          filters:
            branches:
              ignore:
                - /docs?\/.*/
            tags:
              only: /.*/

      - deploy_pypi:
          context:
            - nipreps-common
          requires:
            - build
            - tests
            - build_docs
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/

      - build_docs:
          filters:
            branches:
              ignore:
                - /tests?\/.*/
            tags:
              only: /.*/

  nightly:
    triggers:
      - schedule:
          cron: "0 10 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - build:
          context:
            - nipreps-common
      - tests:
          context:
            - nipreps-common
          requires:
            - build
